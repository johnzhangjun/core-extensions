{
  "swagger": "2.0",
  "info": {
    "title": "OCF Cloud Open API",
    "version": "0.0.1"
  },
  "host": "api.example.com",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Devices",
      "description": "Basic information about devices"
    },
    {
      "name": "Resources",
      "description": "Read or change the configuration of the device"
    },
    {
      "name": "Events",
      "description": "Be notified about changes occuring on the device"
    }
  ],
  "paths": {
    "/devices": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/BatchFormat"
        },
        {
          "$ref": "#/parameters/Accept"
        }
      ],
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get all devices",
        "description": "Get all devices which are signed up to the OCF Cloud - either `online` or `offline`. To filter only devices with a specific status, use the query parameter `s`. Devices which are `online` are signed in to the system and are accessible. Offline devices are signed up to the system, but currently disconnected.\n",
        "parameters": [
          {
            "$ref": "#/parameters/Status"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "An array of devices",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read:deviceinfo"
            ]
          }
        ]
      }
    },
    "/devices/subscriptions": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/Accept"
        },
        {
          "$ref": "#/parameters/ContentType"
        }
      ],
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Subscribe to events against the set of devices",
        "description": "Subscribe to devices events by providing `eventTypes` you're interested in and `eventsUrl` endpoint where events will be sent to as defined. Successful response contains `subscriptionId` which identifies registered subscription and is part of each event. First event for each registered event type is received immediately after subscription and contains actual state of the resource, followed by new events in case of any change.\n\n**Supported events** and required scopes\n- `device_onboarded` ðŸ¡† `read:deviceinfo`\n- `device_offboarded` ðŸ¡† `read:deviceinfo`\n",
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SubscribeResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions"
            ]
          }
        ]
      }
    },
    "/devices/subscriptions/{subscriptionId}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/SubscriptionId"
        }
      ],
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Unsubscribe from events against the set of devices",
        "description": "Cancel subscription identified by the id returned in a response for subscription.\n",
        "responses": {
          "202": {
            "description": "Subscription was marked for cancellation"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions",
              "read:deviceinfo"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/BatchFormat"
        },
        {
          "$ref": "#/parameters/Accept"
        }
      ],
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get the device by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/DeviceWithLinks"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2": [
              "read:deviceinfo",
              "read:resourcedirectory"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/Accept"
        },
        {
          "$ref": "#/parameters/ContentType"
        }
      ],
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Subscribe to events against a specific device",
        "description": "Subscribe to device events by providing `eventTypes` you're interested in and `eventsUrl` endpoint where events will be sent to as defined. Successful response contains `subscriptionId` which identifies registered subscription and is part of each event. First event for each registered event type is received immediately after subscription and contains actual state of the resource, followed by new events in case of any change.\n\n**Supported events** and required scopes\n- `resource_published` ðŸ¡† `read:resource`\n- `resource_unpublished` ðŸ¡† `read:resource`\n- `device_online` ðŸ¡† `read:deviceinfo`\n- `device_offline` ðŸ¡† `read:deviceinfo`\n",
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SubscribeResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/subscriptions/{subscriptionId}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/SubscriptionId"
        }
      ],
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Unsubscribe from events against a specific device",
        "description": "Cancel subscription identified by the id returned in a response for subscription.\n",
        "responses": {
          "202": {
            "description": "Subscription was marked for cancellation"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions",
              "read:deviceinfo",
              "read:resourcedirectory"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/{resourceLinkHref}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ResourceLinkHref"
        },
        {
          "$ref": "#/parameters/Accept"
        }
      ],
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Retrieve resource values",
        "consumes": [
          "application/json",
          "application/vnd.ocf+cbor"
        ],
        "produces": [
          "application/json",
          "application/vnd.ocf+cbor"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/ResourceRetrieveResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2": [
              "read:resource",
              "read:resourceshadow"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Update resource values",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceUpdateRequest"
          },
          {
            "$ref": "#/parameters/ContentType"
          }
        ],
        "consumes": [
          "application/json",
          "application/vnd.ocf+cbor"
        ],
        "produces": [
          "application/json",
          "application/vnd.ocf+cbor"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/ResourceRetrieveResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:resource"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/{resourceLinkHref}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ResourceLinkHref"
        },
        {
          "$ref": "#/parameters/Accept"
        },
        {
          "$ref": "#/parameters/ContentType"
        }
      ],
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Subscribe to events against a specific resource",
        "description": "Subscribe to resource events by providing `eventTypes` you're interested in and `eventsUrl` endpoint where events will be sent to as defined. Successful response contains `subscriptionId` which identifies registered subscription and is part of each event. First event for each registered event type is received immediately after subscription and contains actual state of the resource, followed by new events in case of any change.\n \n**Supported events** and required scopes\n- `resource_contentchanged` ðŸ¡† `read:resource`",
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SubscribeResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/{resourceLinkHref}/subscriptions/{subscriptionId}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ResourceLinkHref"
        },
        {
          "$ref": "#/parameters/SubscriptionId"
        }
      ],
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Unsubscribe from events against a specific resource",
        "description": "Cancel subscription identified by the id returned in a response for subscription.\n",
        "responses": {
          "202": {
            "description": "Subscription was marked for cancellation"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions",
              "read:resource",
              "read:resourceshadow"
            ]
          }
        ]
      }
    },
    "/{eventsUrl}": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Events endpoint provided by the subscriber, where events are delivered",
        "description": "Events endpoint provided during subscription where events specified in the subscription will be sent to  as defined per event type. Confirmation of each event sent to the `eventsUrl` endpoint is required with `2xx` success code. Events you will receive based on event type you're subscribed to are:\n - `subscription_canceled` ðŸ¡† `SubscriptionCanceledEvent`\n - `device_onboarded` ðŸ¡† `DeviceOnboardedEvent`\n - `device_offboarded` ðŸ¡† `DeviceOffboardedEvent`\n - `resource_published` ðŸ¡† `ResourcePublishedEvent`\n - `resource_unpublished` ðŸ¡† `ResourceUnpublishedEvent`\n - `device_online` ðŸ¡† `DeviceOnlineEvent`\n - `device_offline` ðŸ¡† `DeviceOfflineEvent`\n - `resource_contentchanged` ðŸ¡† `ResourceContentChangedEvent`",
        "parameters": [
          {
            "$ref": "#/parameters/CorrelationId"
          },
          {
            "$ref": "#/parameters/ContentType"
          },
          {
            "$ref": "#/parameters/EventSignature"
          },
          {
            "$ref": "#/parameters/EventType"
          },
          {
            "$ref": "#/parameters/Subscription-Id"
          },
          {
            "$ref": "#/parameters/SequenceNumber"
          },
          {
            "$ref": "#/parameters/EventsUrl"
          },
          {
            "$ref": "#/parameters/Event"
          }
        ],
        "consumes": [
          "application/json",
          "application/vnd.ocf+cbor"
        ],
        "responses": {
          "200": {
            "description": "Event successfully recieved"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/api/oauth/dialog",
      "tokenUrl": "https://example.com/api/oauth/token",
      "scopes": {
        "read:deviceinfo": "Read basic device information",
        "read:resourcedirectory": "Read published resource links",
        "read:resource": "Read content of published resource",
        "write:resource": "Update content of published resource",
        "read:resourceshadow": "Read shadow of published resource",
        "write:subscriptions": "Create subscriptions"
      }
    }
  },
  "parameters": {
    "CorrelationId": {
      "name": "Correlation-Id",
      "in": "header",
      "type": "string",
      "format": "uuid",
      "description": "A Correlation ID, also known as a Transit ID, is a unique identifier value that is attached to requests and messages that allow reference to a particular transaction or event chain.\n"
    },
    "ContentType": {
      "name": "Content-Type",
      "in": "header",
      "type": "string",
      "enum": [
        "application/json",
        "application/vnd.ocf+cbor"
      ],
      "required": true,
      "description": "The Content-Type header is used to indicate the media type of the resource. In responses, a Content-Type header tells the client what the content type of the returned content actually is. In requests, (such as POST), the client tells the server what type of data is actually sent.\n"
    },
    "Accept": {
      "name": "Accept",
      "in": "header",
      "type": "string",
      "enum": [
        "application/json",
        "application/vnd.ocf+cbor"
      ],
      "description": "The Accept request header can be used to specify certain media types which are acceptable for the response. Accept headers can be used to indicate that the request is specifically limited to a small set of desired types.\n"
    },
    "EventSignature": {
      "name": "Event-Signature",
      "in": "header",
      "description": "The signature is created for each event by combining the signing secret - OAuth Client Secret with the body of the event request using a standard HMAC-SHA256 keyed hash.\n",
      "type": "string",
      "format": "HMAC-SHA256"
    },
    "Subscription-Id": {
      "name": "Subscription-Id",
      "in": "header",
      "description": "Unique id of the subscription",
      "type": "string",
      "format": "uuid",
      "required": true
    },
    "SequenceNumber": {
      "name": "Sequence-Number",
      "in": "header",
      "description": "Unique id of the subscription",
      "type": "string",
      "format": "uuid",
      "required": true
    },
    "EventType": {
      "name": "Event-Type",
      "in": "header",
      "type": "string",
      "enum": [
        "subscription_canceled",
        "device_onboarded",
        "device_offboarded",
        "resource_contentchanged",
        "resource_published",
        "resource_unpublished",
        "device_online",
        "device_offline"
      ],
      "required": true
    },
    "DeviceType": {
      "description": "Filter devices by device type",
      "name": "rt",
      "in": "query",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ResourceLinkHref": {
      "description": "Path to resource",
      "name": "resourceLinkHref",
      "in": "path",
      "type": "string",
      "required": true
    },
    "DeviceId": {
      "description": "Id of the device",
      "name": "deviceId",
      "in": "path",
      "type": "string",
      "format": "uuid",
      "required": true
    },
    "SubscriptionId": {
      "name": "subscriptionId",
      "in": "path",
      "type": "string",
      "format": "uuid",
      "required": true
    },
    "Status": {
      "name": "s",
      "in": "query",
      "description": "Filter devices by device status",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      }
    },
    "EventsUrl": {
      "name": "eventsUrl",
      "type": "string",
      "in": "path",
      "required": true
    },
    "ResourceUpdateRequest": {
      "description": "Map of resource values to be updated",
      "name": "content",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ResourceUpdateRequest"
      },
      "required": true
    },
    "SubscribeRequest": {
      "name": "content",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/SubscribeRequest"
      },
      "required": true
    },
    "Event": {
      "description": "Event of a specific type, based on what you're subscribed to",
      "name": "content",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ResourceContentChangedEvent"
      },
      "required": true
    },
    "BatchFormat": {
      "description": "Resolve all Links in the response payload to the Resource Representation.",
      "name": "if",
      "in": "query",
      "type": "string",
      "enum": [
        "oic.if.b"
      ]
    }
  },
  "responses": {
    "Unauthorized": {
      "description": "Unauthorized"
    },
    "NotFound": {
      "description": "Not found"
    }
  },
  "definitions": {
    "Device": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/ondrejtomcik/coreocf/Bugzilla-2709/swagger2.0/oic.wk.d.swagger.json#/definitions/Device"
        },
        {
          "type": "object",
          "properties": {
            "s": {
              "$ref": "#/definitions/DeviceStatus"
            }
          }
        }
      ],
      "required": [
        "rt",
        "dmn",
        "n",
        "di",
        "s"
      ],
      "example": {
        "rt": [
          "oic.wk.d"
        ],
        "dmn": "Open Connectivity Foundation",
        "n": "Food safety sensor",
        "di": "53080a4f-5e3e-4291-802f-3436238232d2",
        "s": "online"
      }
    },
    "DeviceWithLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/Device"
        },
        {
          "type": "object",
          "properties": {
            "links": {
              "type": "array",
              "items": {
                "$ref": "https://raw.githubusercontent.com/ondrejtomcik/coreocf/Bugzilla-2709/swagger2.0/oic.wk.res.swagger.json#/definitions/oic.oic-link"
              }
            }
          },
          "required": [
            "rt",
            "href"
          ],
          "example": {
            "rt": [
              "oic.wk.d"
            ],
            "dmn": "Open Connectivity Foundation",
            "n": "Food safety sensor",
            "di": "53080a4f-5e3e-4291-802f-3436238232d2",
            "s": "online",
            "links": [
              {
                "href": "/53080a4f-5e3e-4291-802f-3436238232d2/humidity",
                "rt": [
                  "oic.r.humidity"
                ]
              },
              {
                "href": "/temperature",
                "rt": [
                  "oic.r.temperature"
                ]
              }
            ]
          }
        }
      ]
    },
    "DeviceStatus": {
      "description": "Device status available from the OCF Cloud, which tracks if the device has opened TCP connection and is signed in",
      "type": "string",
      "enum": [
        "online",
        "offline"
      ]
    },
    "ResourceUpdateRequest": {
      "type": "string",
      "description": "Desired content of the resource",
      "example": "o29kZXNpcmVkSHVtaWRpdHkYPGV0eXBlc4Fub2ljLnIuaHVtaWRpdHloaHVtaWRpdHkYKA=="
    },
    "ResourceRetrieveResponse": {
      "type": "string",
      "description": "Content of the resource returned from the device",
      "example": "o29kZXNpcmVkSHVtaWRpdHkYPGV0eXBlc4Fub2ljLnIuaHVtaWRpdHloaHVtaWRpdHkYKA=="
    },
    "EventType": {
      "type": "string",
      "enum": [
        "subscription_canceled",
        "device_onboarded",
        "device_offboarded",
        "resource_contentchanged",
        "resource_published",
        "resource_unpublished",
        "device_online",
        "device_offline"
      ]
    },
    "SubscriptionId": {
      "description": "Unique id of the subscription",
      "type": "string",
      "format": "uuid"
    },
    "SubscribeRequest": {
      "type": "object",
      "properties": {
        "eventsUrl": {
          "$ref": "#/definitions/EventsUrl"
        },
        "eventTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        }
      },
      "required": [
        "eventsUrl",
        "eventTypes"
      ],
      "example": {
        "eventsUrl": "https://notify.openapi.exaple.com/",
        "eventTypes": [
          "device_onboarded",
          "device_offboarded"
        ]
      }
    },
    "SubscribeResponse": {
      "description": "Subscription was registered, waiting for verification",
      "type": "object",
      "properties": {
        "subscriptionId": {
          "$ref": "#/definitions/SubscriptionId"
        }
      },
      "required": [
        "subscriptionId"
      ],
      "example": {
        "subscriptionId": "1eeb465c-5e8d-4305-a366-bbf035fff671"
      }
    },
    "EventsUrl": {
      "type": "string",
      "format": "url",
      "example": "https://notify.openapi.exaple.com/"
    },
    "SubscriptionCanceledEvent": {
      "type": "object",
      "description": "Subscription with provided id was canceled"
    },
    "DeviceOnboardedEvent": {
      "description": "Device was successfully signed up to the OCF Cloud, as defined in the `oic.sec.account`",
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        }
      }
    },
    "DeviceOffboardedEvent": {
      "description": "Device was successfully signed off from the OCF Cloud, as defined in the `oic.sec.account`",
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        }
      }
    },
    "ResourcePublishedEvent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/ondrejtomcik/coreocf/Bugzilla-2709/swagger2.0/oic.wk.res.swagger.json#/definitions/oic.oic-link"
          }
        }
      }
    },
    "ResourceUnpublishedEvent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/ondrejtomcik/coreocf/Bugzilla-2709/swagger2.0/oic.wk.res.swagger.json#/definitions/oic.oic-link"
          }
        }
      }
    },
    "DeviceOnlineEvent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "properties": {
              "di": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        }
      }
    },
    "DeviceOfflineEvent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "properties": {
              "di": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        }
      }
    },
    "ResourceContentChangedEvent": {
      "type": "string",
      "description": "New Content of the resource returned from the device",
      "example": "o29kZXNpcmVkSHVtaWRpdHkYPGV0eXBlc4Fub2ljLnIuaHVtaWRpdHloaHVtaWRpdHkYKA=="
    }
  }
}
