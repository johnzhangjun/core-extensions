{
  "swagger": "2.0",
  "info": {
    "title": "OCF Cloud Open API",
    "version": "0.0.1"
  },
  "host": "api.example.com",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Devices",
      "description": "Basic information about devices"
    },
    {
      "name": "Resources",
      "description": "Read or change the configuration of the device"
    },
    {
      "name": "Events",
      "description": "Be notified about changes occuring on the device"
    }
  ],
  "paths": {
    "/devices": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        }
      ],
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get all devices",
        "description": "Get all devices which are signed up to the OCF Cloud - either `online` or `offline`. To filter only devices with a specific status, use the query parameter `s`. Devices which are `online` are signed in to the system and are accessible. Offline devices are signed up to the system, but currently disconnected.\n",
        "parameters": [
          {
            "$ref": "#/parameters/Status"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "An array of devices",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "read:deviceinfo"
            ]
          }
        ]
      }
    },
    "/devices/subscriptions": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        }
      ],
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Subscribe to events against the set of devices",
        "description": "Subscribe to devices events by providing `eventTypes` you're interested in and `eventsUrl` endpoint where events will be sent as JSON-based payloads. Successful response contains `subscriptionId` which identifies registered, not yet running subscription. Running subscription precedes verification of the `eventsUrl`, which is done by processing of an `url_verification` event sent to the `eventsUrl` together with the `subscriptionId` and `challenge` which has to be returned in the `2xx` success response. After this, the subscription is successful and notifications will be sent.\n\n**Supported events** and required scopes\n- `device_onboarded` ðŸ¡† `read:deviceinfo`\n- `device_offboarded` ðŸ¡† `read:deviceinfo`\n",
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SubscribeResponse"
          },
          "400": {
            "description": "Verification of subscription failed"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Unsubscribe from events against the set of devices",
        "description": "Unsubscribe from devices events by providing 'eventsTypes' you want to unsubscribe from.\n",
        "parameters": [
          {
            "$ref": "#/parameters/UnsubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Subscription was marked for deletion"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "description": "Not subscribed to provided set of events"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions",
              "read:deviceinfo"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        }
      ],
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get the device by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/DeviceWithLinks"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2": [
              "read:deviceinfo",
              "read:resourcedirectory"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        }
      ],
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Subscribe to events against a specific device",
        "description": "Subscribe to device events by providing `eventTypes` you're interested in and `eventsUrl` endpoint where events will be sent as JSON-based payloads. Successful response contains `subscriptionId` which identifies registered, not yet running subscription. Running subscription precedes verification of the `eventsUrl`, which is done by processing of an `url_verification` event sent to the `eventsUrl` together with the `subscriptionId` and `challenge` which has to be returned in the `2xx` success response. After this, the subscription is successful and notifications will be sent.\n\n**Supported events** and required scopes\n- `resource_published` ðŸ¡† `read:resource`\n- `resource_unpublished` ðŸ¡† `read:resource`\n- `device_online` ðŸ¡† `read:deviceinfo`\n- `device_offline` ðŸ¡† `read:deviceinfo`\n",
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SubscribeResponse"
          },
          "400": {
            "description": "Invalid subscription"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Unsubscribe from events against a specific device",
        "description": "Unsubscribe from a device events by providing 'eventsTypes' you want to unsubscribe from.\n",
        "parameters": [
          {
            "$ref": "#/parameters/UnsubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Subscription was marked for deletion"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "description": "Not subscribed to provided set of events"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions",
              "read:deviceinfo",
              "read:resourcedirectory"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/{resourceLinkHref}": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ResourceLinkHref"
        }
      ],
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Retrieve resource values",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/ResourceRetrieveResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2": [
              "read:resource",
              "read:resourceshadow"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Update resource values",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceUpdateRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/ResourceRetrieveResponse"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:resource"
            ]
          }
        ]
      }
    },
    "/devices/{deviceId}/{resourceLinkHref}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/parameters/CorrelationId"
        },
        {
          "$ref": "#/parameters/DeviceId"
        },
        {
          "$ref": "#/parameters/ResourceLinkHref"
        }
      ],
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Subscribe to events against a specific resource",
        "description": "Subscribe to resource events by providing `eventTypes` you're interested in and `eventsUrl` endpoint where events will be sent as JSON-based payloads. Successful response contains `subscriptionId` which identifies registered, not yet running subscription. Running subscription precedes verification of the `eventsUrl`, which is done by processing of an `url_verification` event sent to the `eventsUrl` together with the `subscriptionId` and `challenge` which has to be returned in the `2xx` success response. After this, the subscription is successful and notifications will be sent.\n \n**Supported events** and required scopes\n- `resource_contentchanged` ðŸ¡† `read:resource`",
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SubscribeResponse"
          },
          "400": {
            "description": "Verification of subscription failed"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Unsubscribe from events against a specific resource",
        "description": "Unsubscribe from a resource events by providing 'eventsTypes' you want to unsubscribe from.\n",
        "parameters": [
          {
            "$ref": "#/parameters/UnsubscribeRequest"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Subscription was marked for deletion"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "description": "Not subscribed to provided set of events"
          }
        },
        "security": [
          {
            "oauth2": [
              "write:subscriptions",
              "read:resource",
              "read:resourceshadow"
            ]
          }
        ]
      }
    },
    "/{eventsUrl}": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Events endpoint provided by the subscriber",
        "description": "Events endpoint provided during subscription where events specified in the subscription payload will be sent to in form of the JSON-based payloads. Confirmation of each event sent to the `eventsUrl` endpoint is required with `2xx` success code.\n",
        "parameters": [
          {
            "$ref": "#/parameters/CorrelationId"
          },
          {
            "$ref": "#/parameters/EventSignature"
          },
          {
            "$ref": "#/parameters/EventsUrl"
          },
          {
            "$ref": "#/parameters/Event"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Event successfully recieved"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/api/oauth/dialog",
      "tokenUrl": "https://example.com/api/oauth/token",
      "scopes": {
        "read:deviceinfo": "Read basic device information",
        "read:resourcedirectory": "Read published resource links",
        "read:resource": "Read content of published resource",
        "write:resource": "Update content of published resource",
        "read:resourceshadow": "Read shadow of published resource",
        "write:subscriptions": "Create subscriptions"
      }
    }
  },
  "parameters": {
    "CorrelationId": {
      "name": "Correlation-Id",
      "in": "header",
      "description": "A Correlation ID, also known as a Transit ID, is a unique identifier value that is attached to requests and messages that allow reference to a particular transaction or event chain.\n",
      "type": "string",
      "format": "uuid"
    },
    "EventSignature": {
      "name": "Event-Signature",
      "in": "header",
      "description": "The signature is created for each event by combining the signing secret - OAuth Client Secret with the body of the event request using a standard HMAC-SHA256 keyed hash.\n",
      "type": "string",
      "format": "HMAC-SHA256"
    },
    "DeviceType": {
      "name": "rt",
      "in": "query",
      "description": "Filter devices by device type",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ResourceLinkHref": {
      "name": "resourceLinkHref",
      "in": "path",
      "description": "Path to resource",
      "required": true,
      "type": "string"
    },
    "DeviceId": {
      "name": "deviceId",
      "in": "path",
      "description": "Id of the device",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "Status": {
      "name": "s",
      "in": "query",
      "description": "Filter devices by device status",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      }
    },
    "EventsUrl": {
      "name": "eventsUrl",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "ResourceUpdateRequest": {
      "name": "content",
      "in": "body",
      "description": "Map of resource values to be updated",
      "schema": {
        "$ref": "#/definitions/ResourceUpdateRequest"
      },
      "required": true
    },
    "SubscribeRequest": {
      "name": "content",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/SubscribeRequest"
      },
      "required": true
    },
    "UnsubscribeRequest": {
      "name": "content",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UnsubscribeRequest"
      },
      "required": true
    },
    "Event": {
      "name": "content",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/Event"
      },
      "required": true
    }
  },
  "responses": {
    "Unauthorized": {
      "description": "Unauthorized"
    },
    "NotFound": {
      "description": "Not found"
    }
  },
  "definitions": {
    "Device": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/ondrejtomcik/coreocf/Bugzilla-2709/swagger2.0/oic.wk.d.swagger.json#/definitions/Device"
        },
        {
          "type": "object",
          "properties": {
            "s": {
              "description": "Device status available from the OCF Cloud, which tracks if the device has opened TCP connection and is signed in",
              "type": "string",
              "enum": [
                "online",
                "offline"
              ]
            }
          }
        }
      ],
      "required": [
        "rt",
        "dmn",
        "n",
        "di",
        "s"
      ],
      "example": {
        "rt": [
          "oic.wk.d"
        ],
        "dmn": "Open Connectivity Foundation",
        "n": "Food safety sensor",
        "di": "53080a4f-5e3e-4291-802f-3436238232d2",
        "s": "online"
      }
    },
    "DeviceWithLinks": {
      "allOf": [
        {
          "$ref": "#/definitions/Device"
        },
        {
          "type": "object",
          "properties": {
            "links": {
              "type": "array",
              "items": {
                "$ref": "https://raw.githubusercontent.com/ondrejtomcik/coreocf/Bugzilla-2709/swagger2.0/oic.wk.res.swagger.json#/definitions/oic.oic-link"
              }
            }
          },
          "required": [
            "rt",
            "href"
          ],
          "example": {
            "rt": [
              "oic.wk.d"
            ],
            "dmn": "Open Connectivity Foundation",
            "n": "Food safety sensor",
            "di": "53080a4f-5e3e-4291-802f-3436238232d2",
            "s": "online",
            "links": [
              {
                "href": "/53080a4f-5e3e-4291-802f-3436238232d2/humidity",
                "rt": [
                  "oic.r.humidity"
                ]
              },
              {
                "href": "/temperature",
                "rt": [
                  "oic.r.temperature"
                ]
              }
            ]
          }
        }
      ]
    },
    "ResourceUpdateRequest": {
      "type": "object",
      "description": "Values of resources to be updated",
      "example": {
        "desiredHumidity": 45
      }
    },
    "ResourceRetrieveResponse": {
      "type": "object",
      "description": "Values of resource",
      "example": {
        "types": [
          "oic.r.humidity"
        ],
        "humidity": 40,
        "desiredHumidity": 45
      }
    },
    "SubscribeRequest": {
      "type": "object",
      "properties": {
        "eventsUrl": {
          "$ref": "#/definitions/EventsUrl"
        },
        "subscriptionId": {
          "type": "string",
          "format": "uuid"
        },
        "eventTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        }
      },
      "required": [
        "eventsUrl",
        "subscriptionId",
        "eventTypes"
      ],
      "example": {
        "eventsUrl": "https://notify.openapi.exaple.com/",
        "subscriptionId": "1eeb465c-5e8d-4305-a366-bbf035fff671",
        "eventTypes": [
          "device_onboarded",
          "device_offboarded"
        ]
      }
    },
    "SubscribeResponse": {
      "description": "Subscription was registeredm waiting for verification",
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "uuid"
        },
        "challenge": {
          "type": "string"
        }
      },
      "required": [
        "subscriptionId",
        "challenge"
      ],
      "example": {
        "subscriptionId": "1eeb465c-5e8d-4305-a366-bbf035fff671",
        "challenge": "1l2h7y3a3@4fbj4"
      }
    },
    "UnsubscribeRequest": {
      "type": "object",
      "properties": {
        "eventTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        }
      },
      "required": [
        "eventTypes"
      ],
      "example": {
        "eventTypes": [
          "device_onboarded"
        ]
      }
    },
    "EventsUrl": {
      "type": "string",
      "format": "url",
      "example": "https://notify.openapi.exaple.com/"
    },
    "EventType": {
      "type": "string",
      "enum": [
        "url_verify",
        "subscription_canceled",
        "device_onboarded",
        "device_offboarded",
        "resource_contentchanged",
        "resource_published",
        "resource_unpublished",
        "device_online",
        "device_offline"
      ]
    },
    "Event": {
      "type": "object",
      "properties": {
        "eventType": {
          "$ref": "#/definitions/EventType"
        }
      }
    }
  }
}
